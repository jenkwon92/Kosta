***10일차 주요목차*****
-static
-final
-abstract
-Polymorphism 연습예제
---------------------------------------------------
- static : class 의 member (variable, method)
			  객체 생성없이 클래스 로딩만으로 메모리에 적재(meta space 영역에 저장)
			  
			  클래스명.member (클래스명.static변수 or 클래스명.static메서드)
			  
			  Java Memory
			  Heap 영역 : 객체의 instance variable 이 저장되는 영역
			  Stack 영역 : local variable이 저장되는 영역
			  Meta Space 영역 : class의 data가 저장되는 영역, static member가 저장
			  
			  Java Program  실행단계
			  1. compile 된 class 실행
			  2. Class Loader가 Class Loading -> meta space에 class meta data 정보를 메모리에 적재 ( static)
			  3. class 검증단계
			  4. 실행단계
			  	  main 실행
			  	  필요시에 동적으로 객체 생성 -> heap 영역에 객체 정보 저장, stack영역에 지역변수 저장
			  	  
			  - static 접근 관련
			  
			              		직접 접근 가능
			                	 ------>
			  	  non-static           static
			                 	<------
			                 직접 접근 불가능, 반드시 객체 생성을 필요로 한다
			                 
- final 
	final 상수 : 한번 할당되면 재할당 불가. 상수명은 대문자로 구성되고 합성어는 underscore _로 연결
	ex) private final String ADMIN_ID ="java";
	
	final 메서드 : 자식 클래스에서 오버라이딩 불가
	
	final 클래스 : subclassing 불가 (상속 불가)                 

- abstract
	: 추상 클래스 또는 추상 메서드 선언시 사용하는 자바 키워드
	1. abstract class
	추산 클래스는 직접 객체화 될 수 없다
	ex> public abstract class Animal{}
	-----------------------------------------
	Animal a = new Animal(); //compile error -> abstract class는 new 클래스명() 즉, 객체 생성 불가

	단, 상속을 통한 자식 객체에서 super() 를 이용해 생성은 가능
	
	2. abstract method -> 하위(자식)클래스에게 구현을 강제
		구현부가 존재하지 않는다. 
		부모 차원에서 구현할 수 없는 메서드(기능)이지만 반드시 자식 클래스에게 구현을 강제해야 할 때 사용한다
		부모 클래스에 abstract 메서드가 존재하면
		자식 클래스는 abstract method를 구현하거나 자신이 abstract class로 선언되어야 한다 (직접 객체화x)
		하나 이상의 abstract method가 클래스 내에 존재하면 해당 클래스는 abstract class가 되어야 한다
	
	****Template Method Design Pattern****
	Design Pattern (소프트웨어 설계 패턴) 이란 소프트웨어 설계단계에서 공통적으로 발생하는 문제에 대한 해결방안
	
	Template Method Design Pattern : 상위 클래스에서 알고리즘의 구조를 정의해 재사용하게 하는 패턴 
	상위(부모) 클래스 차원에서 작업공정 or 알고리즘 구조를 정의해 재사용하게 하고 특정 부분은 하위(자식) 클래스에서 구현 또는 재정의해서 사용하도록 하는 패턴

***11일차 주요목차***
- interface
- java.lang.Collection : 자료구조
	Set
	List
	
	
복습 --------------
Object Orientated
1. Encapsulation(캡슐화)  
	> interface,impelementation 인터페이스는 공개하고 구현부는 은닉한다
2. Inheritance (상속) 
	> generalization (일반화) : 부모 멤버를 물려받아 자식이 재활용합니다.
	> 계층구조(hierarchy) 형성을 통한 다형성 적용 환경을 제공한다
3. Polymorphism (다형성)
	> 다양한 객체를 참조할 수 있는 성질 
	> 부모타입의 변수로 다양한 객체를 참조할 수있는 성질
	> 하나의 소통방식으로 다양한 객체를 각자의 방식으로 동작하게 한다
	
	* 인터뷰를 하다가 말문이 막히면 사례를 들어 설명하면 된다
	
	Hello.java
					|   -> javac		class loading : metadata저장 : data를 설명하기 위한 data , 이때 함께 메모리에 static 적재 (static : 널리 공유해 사용할 때 사용)
					v								|
	Hello.class    								v
					java	Hello					코드검증
													|	
													v
													실행 main
													|
													필요시 동적으로 객체 생성(dynamic)

	java memory 
	meta space : static :기초 정보를 저장 (class metadata) -프로그램 시작시 공간이 한번만 잡힘 < 설정정보, 여러객체들이 공유해서 볼 것만>
	stack : local variable(지역변수) : Last In First Out (LIFO)
	heap : 객체의 정보 - 사이즈를 만들고, 유일한 주소값을 생성해 객체를 저장하고 반환

abstract : abstract class, abstract method
	abstract class : 부모의 역할에 직접
							자기 스스로 new로 생성 불가능하지만 부모로서 역할 가능( 멤버 물려줌, 다형성 지원)
	abstract method : 자식 클래스에게 구현을 강조한다 
								자신도 abstract로 만들어진다.


software design pattern : 어떠한 시스템을 만드는 시점에서 이런식으로 설계를 하면 유용하구나
									문제해결을 위한 설계의 방식입니다.
									
								1) Template Method design Pattern : 상위클래스에서 알고리즘의 구조를 정의해서 하위 클래스에게 물려주고 재사용하게 하는 것
																					문제해결에 틀이되는 작업 전반을 물려주고 부분적으로 재정의
																					ex> 피자에서 토핑만 재정의 나머지는 물려준다 
																			
								


















			                 
			                 
			                 
			                 