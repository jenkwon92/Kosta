**Network**

Java 기반의 TCP/IP 네트워크 프로그래밍 

주요 클래스 : java.net.*   Socket , ServerSocket 

Protocol : 프로토콜 , 약속 , 통신규약 

TCP/IP : 인터넷 통신 규약 

TCP : Transmission Control Protocol 전송 제어 프로토콜 
		신뢰성이 높다 -> 데이터 전달을 보증 
IP : Internet Protocol  ,  ip address -> 127.0.0.1 ( localhost) : 자신의 컴퓨터의 IP 	
    
      DNS( Domain Name System ) : 사용자들이 ip를 기억하기에 불편함이 있으므로 주로 Domain Name을 이용한다( www.google.com , www.naver.com .. ) 
      
Port : 가상의 연결단위 , 서버의 서비스 번호(입구) 
		ex)  http://127.0.0.1:8888
			 http : protocol 
			 127.0.0.1 : ip 
			 8888 : port 
			 
Socket : 소켓이란 네트워크 연결의 양 끝단위(end-point)로서 통신을 하기 위한 인터페이스를 제공한다 ( 실세계 예 - 전화기 ) 	
		   코드 예 )
		   Socket socket=new Socket(serverIp,port);	
		   socket.getOutputStream() -> 출력스트림 
		   socket.getInputStream() -> 입력스트림 	
		   
ServerSocket : 통신 서버를 구현하기 위한 객체 
				  코드 예 ) ServerSocket serverSocket=new ServerSocket(port);	
				  			Socket socket=serverSocket.accept(); //접속을 대기하다가 클라이언트 접속하면 실행된다. 실행 후 일반 Socket을 반환한다
				  			//반환받은 일반 socket으로 실제 클라이언트와 통신하게 된다  	 
				  			//ServerSocket은 대표전화 , Socket은 상담원 전화기(실제 고객과 통신)   	 


step1
서버는 클라이언트의 접속을 대기하다가 클라이언트가 접속하면 
메세지를 출력하고 그 메세지를 클라이언트는 입력받아 화면에 출력하고 
서버 , 클라이언트 모두 종료되는 프로그램 

ServerSocket : 대표전화, 접수처 역할 		 Socket : 실제 통신 역할 


Server 											Client
------											-----
ServerSocket(port) 생성
Socket socket=serverSocket.accept();       Socket socket=new Socket(IP,PORT);  
socket.getOutputStream()					   socket.getInputStream() 
close()											   close()

--------------------------------------------------------------
step2
서버는 다수의 클라이언트의 접속을 처리해 메세지를 출력하도록 step1을 변경해본다 ( 동시 접속 처리는 아니고 , 순차적으로 처리한다 ) 
클라이언트는 step1과 변화가 없다 

--------------------------------------------------------------
step3
step2 역할을 서버 , 클라이언트가 바꿔본다 

서버는 접속을 대기, 클라이언트가 접속해서 메세지를 출력하면 그 메세지를 입력받아 서버 콘솔에 출력하고 연결 종료한 후
다음 클라이언트의 접속을 대기한다( 반복 ) 

클라이언트는 서버에 접속해서 메세지를 출력하고 자신은 종료한다  




























		







	