**12일차 주요목차**

- abstract / interface review

- java.util.Collection
	1) java.util.Set
	2) java.util.List
	
	----------------------------------------------
	
	abstract 와 interface 의 공통점
	: 계층구조 형성을 통한 다형성 적용
	abstract method 를 통해 하위 클래스에게 구현을 강제 
	직점 객체 생성 불가 (new 를 통한)
	
	abstract와 interface 의 차이점
	: abstract는 단일 계층 구조로, interface는 다양항 계층 구조 형성이 가능
	abstract는 Object의 member(instance variable, 구현된 method) 를 상속시킬 수 있고
	interface는 오직 static final 상수와 abstract method 만 가질 수 있다. (참고- jdk 1.8 이상에서는 default , static 메서드 추가)
	
	
	- java.util.Collection
	java.util.Collection interface 는 Collection 계층 구조의 최상위인 인터페이스이다
	(The root interface in the collection hierarchy)
	모든 java 자료구조 객체(ArrayList, TreeSet 등 ) 는 최상위 인터페이스인 Collection 에서 명시한 abstract method를 모두 구현하고 있다는 것을 보장
	또한 모든 자바 자료구조체는 Collection Interface 타입의 변수로 참조 될 수 있음을 의미한다 
	
	Collection 계열 or API or Framework 은 다양한 데이터들을 효과적으로 제어하고 관리하기 위한 인터페이스 및 클래스의 모음(Library : 재사용 가능한 프로그램들의 모음)
	
	Collection 계열의 대표적인 인터페이스 : Set,  List ,  Map
	
	Generic : 타입을 미리 지정해서 데이터 안정성을 보장 ex> LinkedHashSet<String>
		
	1) java.util.Set : 중복 허용 x, 즉, 동일한 데이터를 중복해서 저장하지 않는다
		LinkedHashSet class -> 중복 인정 x, 추가 순서를 보장
		TreeSet -> 중복 인정 x, 순서 정렬기능
	
	2) java.util.List : 인덱스로 관리
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	