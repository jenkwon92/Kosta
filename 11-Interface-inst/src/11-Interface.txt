  **11일차 주요목차**
  - Polymorphism 연습 예제 
  - interface 
  - java.util.Collection : 자료구조 
     Set 
     List 	
  --------------------------   
  - Polymorphism 연습 예제 
    1)
    사원번호( empNo )에 해당하는 사원(엔지니어or매니저or일반사원)이 배열 내의 몇번째에 위치하는 지를 position을 반환하는 메서드
    만약 사원번호( empNo ) 에 해당하는 사원이 배열 내에 없으면 -1을 반환한다  
    2)
      사원 정보를 삭제하는 메서드 
	  매개변수로 전달된 인자값 empNo에 해당하는 사원객체가 배열요소로 존재하면 삭제하는 메서드 
	  만약 사원번호에 일치하는 배열 요소가 없다면 ex) 99 사원번호에 해당하는 사원이 없어서 삭제불가 라는 메세지를 남긴다
	  
	  일치하는 사원이 있으면 해당 사원이 배열에 위치한 position 을 이용해 그 시점부터 
	  총사원수(count)보다 작을 동안 반복하면서 뒤 요소를 앞요소로 할당하는 방식으로 삭제한다 
	  ( ex -> array[i]=array[i+1]  ) 
	  삭제한 후 총사원수는 -1 감소시킨다 
	  만약 삭제할 요소가 배열의 마지막 요소라면 array[i]=array[i+1]; 작업이 불가능하므로 이 경우에는 직접 null을 할당한다
	   ( array.length 를 이용하면 배열의 마지막 요소인지 확인 가능하다 ) 
	   
	- interface 
	 : 다양한 계층구조 형성을 통한 다형성 지원이 목적
	  ( 자바는 단일 상속이므로 단일한 계층 구조를 가지는 데 인터페이스를 이용하면 다양한 계층 구조를 가질 수 있다 ) 
	   구현한 측(서비스를 제공하는 측)과 사용하는 측(서비스를 이용하는 측)과의 약속 , 소통방식 
	   interface를 이용하면 다양한 구현체(하위 클래스)들이 업데이트 되어도 외부 영향을 최소화 할 수 있다 
	   -> 결합도를 느슨하여 유지보수성을 향상시킬 수 있다 
	   
	   일반적으로 인터페이스는 abstract method와 public static final 상수만 가질 수 있다 
	   즉 인스턴스변수 및 구현된 메서드는 가질 수 없다 ( 1.8 이상부터 default 및 static 메서드는 예외 ) 
	
	   참고) Inheritance 장점
	         1. 부모 멤버(변수,메서드)를 물려받아 재사용 
	         2. 계층구조 형성을 통한 다형성 지원 -----> Java Interface는 2번 장점에 촛점 : 다양한 계층구조 형성을 가능케 한다 
	
	   ex)   public interface Flyer{
	   			 String ID="javaking"; // public static final 상수로 인식 
	   			 public void fly(); // abstract 즉 추상 메서드로 인식 
	   			 //public void landOff(){} // 일반 구현 메서드는 정의 불가 compile error 
	   		  }
	   		  public interface Fighter{
	   		  	public void fight();
	   		  }
			  //하위 구현 클래스 
			  public class SuperMan extends Person implements Flyer,Fighter{ //다양한 인터페이스를 implements해서 다양한 계층구조 하에 편입 가능 
			  		//인터페이스의 abstract 메서드는 반드시 구현 
			  		public void fly(){}
			  		public void fight(){}
			  }	
	
	
	    - 인터페이스끼리는 다중 상속이 가능하다 ( abstract method를 상속 ) : step5 예제에서 확인 
	    
	    - jdk 1.8 버전 이상에서는 default 메서드와 static 메서드를 인터페이스에 정의할 수 있다 -> 유지보수성 차원 
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	
	
	
	
	   
	   
	   
	   
	   
	   
	   
	   
	   